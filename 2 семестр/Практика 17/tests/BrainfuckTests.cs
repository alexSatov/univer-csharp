using System;
using System.Text;
using func.brainfuck;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace brainfuck.tests
{
	[TestClass]
	public class BrainfuckTests
	{
		private string Run(string program, string input = "")
		{
			var inputIndex = 0;
			var output = new StringBuilder();
			Brainfuck.Run(program, 
				() => inputIndex >= input.Length ? -1 : input[inputIndex++],
				c => output.Append(c));
			Console.WriteLine(output);
			return output.ToString();
		}

		[TestMethod]
		public void Print()
		{
			Assert.AreEqual("\0", Run("."));
		}

		[TestMethod]
		public void Inc()
		{
			Assert.AreEqual("\x1", Run("+."));
			Assert.AreEqual("\x5", Run("+++++."));
			Assert.AreEqual("A", Run(new string('+', 'A') + "."));
			Assert.AreEqual("Z", Run(new string('+', 'Z') + "."));
			Assert.AreEqual("\xFF", Run(new string('+', 255) + "."));
		}

		[TestMethod]
		public void Dec()
		{
			Assert.AreEqual("\0", Run("+-."));
			Assert.AreEqual("\x1", Run("+++--."));
			Assert.AreEqual("A", Run(new string('+', 'C') + "--."));
		}

		[TestMethod]
		public void IncOverflow()
		{
			Assert.AreEqual("\x1", Run(new string('+', 257) + "."));
		}
		
		[TestMethod]
		public void DecOverflow()
		{
			Assert.AreEqual("\xFF", Run("-."));
			Assert.AreEqual("\x1", Run(new string('-', 255) + "."));
		}

		[TestMethod]
		public void Shift()
		{
			Assert.AreEqual("\x2", Run("+>++."));
			Assert.AreEqual("\x1", Run("+>++<."));
			Assert.AreEqual("\x1", Run("+>++>+++<<."));
		}

		[TestMethod]
		public void ShiftOverflow()
		{
			Assert.AreEqual("\x2", Run("++<>."));
			Assert.AreEqual("\x1", Run("+<++<+++>>."));
			Assert.AreEqual("\x3", Run("+++" + new string('>', 30000) + "."));
			Assert.AreEqual("\x3", Run("+++" + new string('<', 30000) + "."));
		}

		[TestMethod]
		public void Read()
		{
			Assert.AreEqual("A", Run(",.", "A"));
			Assert.AreEqual("ABC", Run(",.,.,.", "ABC"));
		}

		[TestMethod]
		public void HelloWorld()
		{
			Assert.AreEqual("Hello World!\n", Run(@"
 +++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++.+++++++++++++++++
 ++++++++++++.+++++++..+++.-------------------
 ---------------------------------------------
 ---------------.+++++++++++++++++++++++++++++
 ++++++++++++++++++++++++++.++++++++++++++++++
 ++++++.+++.------.--------.------------------
 ---------------------------------------------
 ----.-----------------------.
"));
		}

		[TestMethod]
		public void Task2_Loop()
		{
			Assert.AreEqual("\x0", Run("[+.]."));
			Assert.AreEqual("\x1\x0", Run("+[.-]."));
			Assert.AreEqual("\x3\x2\x1\x0", Run("+++[.-]."));
		}
		
		[TestMethod]
		public void Task2_NestedLoops()
		{
			Assert.AreEqual("\x4", Run("++[>++[>+<-]<-]>>."));
		}

		[TestMethod]
		public void Task2_HelloWorld()
		{
			Assert.AreEqual("Hello World!\n", Run(@"
++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++
.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.
------.--------.>+.>."));
		}

		[TestMethod]
		public void Task2_BottlesOfBeer()
		{
			var text = Run(@"
>+++++++++[<+++++++++++>-]<[>[-]>[-]<<[>+>+<<-]>>[<<+>>-]>>>
[-]<<<+++++++++<[>>>+<<[>+>[-]<<-]>[<+>-]>[<<++++++++++>>>+<
-]<<-<-]+++++++++>[<->-]>>+>[<[-]<<+>>>-]>[-]+<<[>+>-<<-]<<<
[>>+>+<<<-]>>>[<<<+>>>-]>[<+>-]<<-[>[-]<[-]]>>+<[>[-]<-]<+++
+++++[<++++++<++++++>>-]>>>[>+>+<<-]>>[<<+>>-]<[<<<<<.>>>>>-
]<<<<<<.>>[-]>[-]++++[<++++++++>-]<.>++++[<++++++++>-]<++.>+
++++[<+++++++++>-]<.><+++++..--------.-------.>>[>>+>+<<<-]>
>>[<<<+>>>-]<[<<<<++++++++++++++.>>>>-]<<<<[-]>++++[<+++++++
+>-]<.>+++++++++[<+++++++++>-]<--.---------.>+++++++[<------
---->-]<.>++++++[<+++++++++++>-]<.+++..+++++++++++++.>++++++
++[<---------->-]<--.>+++++++++[<+++++++++>-]<--.-.>++++++++
[<---------->-]<++.>++++++++[<++++++++++>-]<++++.-----------
-.---.>+++++++[<---------->-]<+.>++++++++[<+++++++++++>-]<-.
>++[<----------->-]<.+++++++++++..>+++++++++[<---------->-]<
-----.---.>>>[>+>+<<-]>>[<<+>>-]<[<<<<<.>>>>>-]<<<<<<.>>>+++
+[<++++++>-]<--.>++++[<++++++++>-]<++.>+++++[<+++++++++>-]<.
><+++++..--------.-------.>>[>>+>+<<<-]>>>[<<<+>>>-]<[<<<<++
++++++++++++.>>>>-]<<<<[-]>++++[<++++++++>-]<.>+++++++++[<++
+++++++>-]<--.---------.>+++++++[<---------->-]<.>++++++[<++
+++++++++>-]<.+++..+++++++++++++.>++++++++++[<---------->-]<
-.---.>+++++++[<++++++++++>-]<++++.+++++++++++++.++++++++++.
------.>+++++++[<---------->-]<+.>++++++++[<++++++++++>-]<-.
-.---------.>+++++++[<---------->-]<+.>+++++++[<++++++++++>-
]<--.+++++++++++.++++++++.---------.>++++++++[<---------->-]
<++.>+++++[<+++++++++++++>-]<.+++++++++++++.----------.>++++
+++[<---------->-]<++.>++++++++[<++++++++++>-]<.>+++[<----->
-]<.>+++[<++++++>-]<..>+++++++++[<--------->-]<--.>+++++++[<
++++++++++>-]<+++.+++++++++++.>++++++++[<----------->-]<++++
.>+++++[<+++++++++++++>-]<.>+++[<++++++>-]<-.---.++++++.----
---.----------.>++++++++[<----------->-]<+.---.[-]<<<->[-]>[
-]<<[>+>+<<-]>>[<<+>>-]>>>[-]<<<+++++++++<[>>>+<<[>+>[-]<<-]
>[<+>-]>[<<++++++++++>>>+<-]<<-<-]+++++++++>[<->-]>>+>[<[-]<
<+>>>-]>[-]+<<[>+>-<<-]<<<[>>+>+<<<-]>>>[<<<+>>>-]<>>[<+>-]<
<-[>[-]<[-]]>>+<[>[-]<-]<++++++++[<++++++<++++++>>-]>>>[>+>+
<<-]>>[<<+>>-]<[<<<<<.>>>>>-]<<<<<<.>>[-]>[-]++++[<++++++++>
-]<.>++++[<++++++++>-]<++.>+++++[<+++++++++>-]<.><+++++..---
-----.-------.>>[>>+>+<<<-]>>>[<<<+>>>-]<[<<<<++++++++++++++
.>>>>-]<<<<[-]>++++[<++++++++>-]<.>+++++++++[<+++++++++>-]<-
-.---------.>+++++++[<---------->-]<.>++++++[<+++++++++++>-]
<.+++..+++++++++++++.>++++++++[<---------->-]<--.>+++++++++[
<+++++++++>-]<--.-.>++++++++[<---------->-]<++.>++++++++[<++
++++++++>-]<++++.------------.---.>+++++++[<---------->-]<+.
>++++++++[<+++++++++++>-]<-.>++[<----------->-]<.+++++++++++
..>+++++++++[<---------->-]<-----.---.+++.---.[-]<<<]");

			Assert.IsTrue(text.Contains("99 Bottles of beer on the wall"));
			Assert.IsTrue(text.Contains("Take one down and pass it around"));
			Assert.IsTrue(text.Contains("43 Bottles of beer on the wall"));
			Assert.IsTrue(text.Contains("1 Bottle of beer on the wall"));
			Assert.IsTrue(text.Contains("0 Bottles of beer on the wall"));
		}

		[TestMethod]
		public void Task3_Constants()
		{
			Assert.AreEqual("Hello123", Run("H.e.l.l.o.1.2.3."));
		}

		[TestMethod]
		public void Task4_OptimizedLoops()
		{
			var s = new string('.', 10000);
			Run("Z[->Z[->[" + s + "]<]<]");
		}

	}
}
